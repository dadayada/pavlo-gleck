{"version":3,"sources":["header/state.js","header/index.js","header/view.js","core/state.js","people-list/state.js","core/index.js","confirm-modal/index.js","confirm-modal/state.js","people-list/init.js","people-list/view.js","add-modal/init.js","add-modal/view.js","person-info/index.js","person-info/init.js","person-info/view.js","confirm-modal/init.js","confirm-modal/view.js","app/app.js","serviceWorker.js","core/init.js","index.js"],"names":["searchValueChanged","createEvent","$searchValue","restore","map","p","target","value","addPersonClicked","addCategoryClicked","Header","useStyletron","css","theme","searchValue","useStore","className","position","top","sizing","scale300","display","placeholder","onChange","startEnhancer","size","scale800","content","close","items","label","onItemSelect","item","peopleLocalStorage","connectLocalStorage","categoriesLocalStorage","peopleInfoLocalStorage","$people","createStore","init","$categories","$peopleInfo","watch","$peopleList","combine","people","filter","el","fullName","toLowerCase","includes","personAdded","personRemoved","categoryAdded","personInfoEdited","confirmModalClosed","confirmModalOpened","confirmModalClickedYes","confirmModalClickedCancel","$confirmModalOwner","removePersonClicked","$personIdToRemove","on","_","id","forward","from","to","sampledPersonRemoved","guard","source","sample","clock","owner","prepend","PeopleList","useList","kind","onClick","modalClose","newPersonDataPushed","newCategoryDataPushed","fullNameChanged","categoryNameChanged","$modalOpen","reset","$fullName","$categoryName","$modalType","AddModal","modalOpen","categoryName","modalType","isOpen","onClose","animate","autoFocus","SIZE","default","role","ROLE","dialog","e","fn","Math","random","name","Date","now","categoryEdited","personInfoGate","createGate","state","find","String","$personInfo","peopleInfo","categories","personNonEmptyInfo","category","PersonInfo","useParams","useGate","margin","justifyContent","pageParams","personId","info","categoryId","$confirmModalOpen","ConfirmModal","console","log","engine","Styletron","App","LightTheme","path","exact","Boolean","window","location","hostname","match","s","newState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2599b3a.chunk.js","sourcesContent":["import { createEvent, restore } from 'effector';\n\nconst searchValueChanged = createEvent();\n\nconst $searchValue = restore(searchValueChanged.map(p => p.target.value), '');\n\nexport {\n  $searchValue,\n  searchValueChanged\n}","import { createEvent } from 'effector';\n\nexport const addPersonClicked = createEvent();\nexport const addCategoryClicked = createEvent();\n","import React from 'react';\nimport { useStore } from 'effector-react';\nimport { useStyletron } from 'baseui';\nimport { StatefulPopover } from 'baseui/popover';\nimport { StatefulMenu } from 'baseui/menu';\nimport { Button } from 'baseui/button';\nimport { Input } from 'baseui/input';\nimport { Search, Menu } from 'baseui/icon';\nimport { $searchValue, searchValueChanged } from './state';\nimport { addCategoryClicked, addPersonClicked } from '.';\n\nconst ADD_PERSON_LABEL = 'Add person';\nconst ADD_CATEGORY_LABEL = 'Add category';\n\nconst onItemSelect = item => {\n  if (item.label === ADD_CATEGORY_LABEL) {\n    addCategoryClicked();\n  } else if (item.label === ADD_PERSON_LABEL) {\n    addPersonClicked();\n  }\n};\n\nexport function Header() {\n  const [css, theme] = useStyletron();\n  const searchValue = useStore($searchValue);\n\n  return (\n    <section\n      className={css({\n        position: 'sticky',\n        top: theme.sizing.scale300,\n        display: 'flex',\n      })}\n    >\n      <Input\n        placeholder='Search person'\n        value={searchValue}\n        onChange={searchValueChanged}\n        startEnhancer={<Search size={theme.sizing.scale800} />}\n      />\n      <StatefulPopover\n        content={({ close }) => (\n          <StatefulMenu\n            items={[{ label: ADD_PERSON_LABEL }, { label: ADD_CATEGORY_LABEL }]}\n            onItemSelect={({ item }) => {\n              close();\n              onItemSelect(item);\n            }}\n          />\n        )}\n      >\n        <Button>\n          <Menu size='scale800' />\n        </Button>\n      </StatefulPopover>\n    </section>\n  );\n}\n","import { createStore } from 'effector';\nimport connectLocalStorage from \"effector-localstorage\";\n\nconst peopleLocalStorage = connectLocalStorage('people/$people');\nconst categoriesLocalStorage = connectLocalStorage('people/$categories');\nconst peopleInfoLocalStorage = connectLocalStorage('people/$peopleInfo');\n\nconst $people = createStore(peopleLocalStorage.init([]));\nconst $categories = createStore(categoriesLocalStorage.init([]));\nconst $peopleInfo = createStore(peopleInfoLocalStorage.init({})); // { [personId]: { [categoryId]: value } } \n\n$people.watch(peopleLocalStorage);\n$categories.watch(categoriesLocalStorage);\n$peopleInfo.watch(peopleInfoLocalStorage);\n\nexport { $people, $categories, $peopleInfo };\n","import { combine } from 'effector';\nimport { $people } from '../core/state';\nimport { $searchValue } from '../header/state';\n\nconst $peopleList = combine($searchValue, $people, (searchValue, people) =>\n  people.filter(el =>\n    el.fullName.toLowerCase().includes(searchValue.toLowerCase())\n  )\n);\n\nexport { $peopleList };\n","import { createEvent } from 'effector';\n\nexport const personAdded = createEvent();\nexport const personRemoved = createEvent();\n\nexport const categoryAdded = createEvent();\n\nexport const personInfoEdited = createEvent(); // payload: { personId, info: { categoryId: value } }\n","import { createEvent } from 'effector';\n\nexport const confirmModalClosed = createEvent();\nexport const confirmModalOpened = createEvent();\nexport const confirmModalClickedYes = createEvent();\nexport const confirmModalClickedCancel = createEvent();\n","import { createStore } from \"effector\";\n\nexport const $confirmModalOwner = createStore(null);","import {\n  createEvent,\n  createStore,\n  sample,\n  forward,\n  combine,\n  guard,\n} from 'effector';\nimport { personRemoved } from '../core';\nimport { confirmModalOpened, confirmModalClickedYes } from '../confirm-modal';\nimport { $confirmModalOwner } from '../confirm-modal/state';\n\nexport const removePersonClicked = createEvent();\n\nconst $personIdToRemove = createStore(null).on(\n  removePersonClicked,\n  (_, { id }) => id\n);\n\nforward({\n  from: removePersonClicked.map(() => 'remove-person'),\n  to: confirmModalOpened,\n});\n\nconst sampledPersonRemoved = guard({\n  source: sample({\n    clock: confirmModalClickedYes,\n    source: combine($personIdToRemove, $confirmModalOwner, (id, owner) => ({\n      id,\n      owner,\n    })),\n  }),\n  filter: ({ owner }) => owner === 'remove-person',\n  target: personRemoved.prepend(p => ({ id: p.id })),\n});\n\nforward({ from: sampledPersonRemoved.map(() => null), to: $confirmModalOwner });\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ListItem } from 'baseui/list';\nimport { Button } from 'baseui/button';\nimport { DeleteAlt } from 'baseui/icon';\nimport { LabelMedium } from 'baseui/typography';\nimport { useList } from 'effector-react';\nimport { $peopleList } from './state';\nimport { removePersonClicked } from './init';\n\nexport function PeopleList() {\n  return (\n    <section>\n      {useList($peopleList, ({ fullName, id }) => (\n        <ListItem>\n          <Link to={`/pavlo-gleck/person-info/${id}`}>\n            <LabelMedium>{fullName}</LabelMedium>\n          </Link>\n          <Button kind='tertiary' onClick={() => removePersonClicked({ id })}>\n            <DeleteAlt size='scale800' />\n          </Button>\n        </ListItem>\n      ))}\n    </section>\n  );\n}\n","import { createStore, createEvent, sample } from 'effector';\nimport { personAdded, categoryAdded } from '../core';\nimport { addCategoryClicked, addPersonClicked } from '../header';\n\nexport const modalClose = createEvent();\nexport const newPersonDataPushed = createEvent();\nexport const newCategoryDataPushed = createEvent();\nexport const fullNameChanged = createEvent();\nexport const categoryNameChanged = createEvent();\n\nexport const $modalOpen = createStore(false)\n  .on([addCategoryClicked, addPersonClicked], () => true)\n  .on(modalClose, () => false)\n  .reset([newPersonDataPushed, newCategoryDataPushed]);\n\nexport const $fullName = createStore('').on(fullNameChanged, (_, p) => p);\nexport const $categoryName = createStore('').on(\n  categoryNameChanged,\n  (_, p) => p\n);\n\nexport const $modalType = createStore(null)\n  .on(addCategoryClicked, () => 'category')\n  .on(addPersonClicked, () => 'person');\n\nsample({\n  clock: newPersonDataPushed,\n  source: $fullName,\n  fn: source => ({ fullName: source, id: Math.random() }),\n  target: personAdded,\n});\n\nsample({\n  clock: newCategoryDataPushed,\n  source: $categoryName,\n  fn: source => ({ name: source, id: Date.now() }),\n  target: categoryAdded,\n});\n\n$fullName.reset([modalClose, personAdded]);\n$categoryName.reset([modalClose, categoryAdded])","import React from 'react';\nimport { useStore } from 'effector-react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalButton,\n  SIZE,\n  ROLE,\n} from 'baseui/modal';\nimport { FormControl } from 'baseui/form-control';\nimport { Input } from 'baseui/input';\nimport {\n  $modalOpen,\n  modalClose,\n  $fullName,\n  fullNameChanged,\n  newPersonDataPushed,\n  newCategoryDataPushed,\n  $modalType,\n  $categoryName,\n  categoryNameChanged,\n} from './init';\n\nexport function AddModal() {\n  const modalOpen = useStore($modalOpen);\n  const fullName = useStore($fullName);\n  const categoryName = useStore($categoryName);\n  const modalType = useStore($modalType);\n  return (\n    <Modal\n      isOpen={modalOpen}\n      onClose={modalClose}\n      animate\n      autoFocus\n      size={SIZE.default}\n      role={ROLE.dialog}\n    >\n      <ModalHeader>\n        {modalType === 'category' ? 'New category' : 'New person'}\n      </ModalHeader>\n      <ModalBody>\n        <FormControl\n          label={modalType === 'category' ? 'Category name' : 'Full name'}\n        >\n          <Input\n            id={modalType === 'category' ? 'category-name' : 'full-name'}\n            value={modalType === 'category' ? categoryName : fullName}\n            onChange={e =>\n              modalType === 'category'\n                ? categoryNameChanged(e.target.value)\n                : fullNameChanged(e.target.value)\n            }\n          />\n        </FormControl>\n      </ModalBody>\n      <ModalFooter>\n        <ModalButton\n          onClick={\n            modalType === 'category'\n              ? newCategoryDataPushed\n              : newPersonDataPushed\n          }\n        >\n          Add\n        </ModalButton>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import { createEvent } from 'effector';\n\nexport const categoryEdited = createEvent();","import { createGate } from 'effector-react';\nimport { combine, sample } from 'effector';\nimport { $categories, $peopleInfo, $people } from '../core/state';\nimport { personInfoEdited } from '../core';\nimport { categoryEdited } from '.';\n\nexport const personInfoGate = createGate('person-info');\n\nexport const $fullName = combine(\n  personInfoGate.state,\n  $people,\n  ({ id }, people) => people.find(el => String(el.id) === String(id))?.fullName\n);\n\nexport const $personInfo = combine(\n  $peopleInfo,\n  $categories,\n  personInfoGate.state,\n  (peopleInfo, categories, { id }) => {\n    if (!id) {\n      return [];\n    }\n    const personNonEmptyInfo = peopleInfo[id];\n    return categories.map(category => ({\n      id: category.id,\n      name: category.name,\n      value: personNonEmptyInfo[category.id] || null,\n    }));\n  }\n);\n\nsample({\n  source: personInfoGate.state,\n  clock: categoryEdited,\n  fn: (pageParams, { id, value }) => ({\n    personId: pageParams.id,\n    info: { categoryId: id, value: value },\n  }),\n  target: personInfoEdited,\n});\n","import React from 'react';\nimport { useList, useGate, useStore } from 'effector-react';\nimport { useParams } from 'react-router-dom';\nimport { Textarea } from 'baseui/textarea';\nimport { Block } from 'baseui/block';\nimport { HeadingSmall } from 'baseui/typography';\nimport { FormControl } from 'baseui/form-control';\nimport { $personInfo, personInfoGate, $fullName } from './init';\nimport { categoryEdited } from '.';\n\nexport function PersonInfo() {\n  const { id } = useParams();\n  useGate(personInfoGate, { id });\n  const fullName = useStore($fullName);\n  return (\n    <Block margin='scale500'>\n      <HeadingSmall justifyContent=\"center\">{fullName}</HeadingSmall>\n      {useList($personInfo, ({ id, name, value }) => (\n        <>\n          <FormControl label={name}>\n            <Textarea\n              id={name}\n              value={value}\n              onChange={e => categoryEdited({ id, value: e.target.value })}\n            />\n          </FormControl>\n        </>\n      ))}\n    </Block>\n  );\n}\n","import { createStore } from 'effector';\nimport {\n  confirmModalClosed,\n  confirmModalOpened,\n  confirmModalClickedCancel,\n  confirmModalClickedYes,\n} from '.';\nimport { $confirmModalOwner } from './state';\n\nexport const $confirmModalOpen = createStore(false)\n  .on(confirmModalOpened, () => true)\n  .reset([\n    confirmModalClickedCancel,\n    confirmModalClickedYes,\n    confirmModalClosed,\n  ]);\n\n$confirmModalOwner\n  .on(confirmModalOpened, (_, p) => p)\n  .reset([confirmModalClickedCancel, confirmModalClosed]);\n\n  $confirmModalOwner.watch(console.log)\n","import React from 'react';\nimport { useStore } from 'effector-react';\nimport {\n  Modal,\n  ModalHeader,\n  ModalFooter,\n  ModalButton,\n  SIZE,\n  ROLE,\n} from 'baseui/modal';\nimport { $confirmModalOpen } from './init';\nimport {\n  confirmModalClosed,\n  confirmModalClickedCancel,\n  confirmModalClickedYes,\n} from '.';\n\nexport function ConfirmModal() {\n  const modalOpen = useStore($confirmModalOpen);\n  return (\n    <Modal\n      isOpen={modalOpen}\n      onClose={confirmModalClosed}\n      animate\n      autoFocus\n      size={SIZE.default}\n      role={ROLE.dialog}\n    >\n      <ModalHeader>Confirm?</ModalHeader>\n      <ModalFooter>\n        <ModalButton kind='tertiary' onClick={confirmModalClickedCancel}>\n          Cancel\n        </ModalButton>\n        <ModalButton onClick={confirmModalClickedYes}>Okay</ModalButton>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, BaseProvider } from 'baseui';\nimport { Block } from 'baseui/block';\nimport { Header } from '../header/view';\nimport { PeopleList } from '../people-list/view';\nimport { AddModal } from '../add-modal/view';\nimport { PersonInfo } from '../person-info/view';\nimport { ConfirmModal } from '../confirm-modal/view';\n\nconst engine = new Styletron();\n\nexport function App() {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <Router>\n          <Block>\n            <Switch>\n              <Route path='/pavlo-gleck' exact>\n                <Block margin='scale500'>\n                  <Header />\n                </Block>\n                <PeopleList />\n              </Route>\n              <Route path='/pavlo-gleck/person-info/:id'>\n                <PersonInfo />\n              </Route>\n            </Switch>\n            <AddModal />\n            <ConfirmModal />\n          </Block>\n        </Router>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { personAdded, personRemoved, categoryAdded, personInfoEdited } from '.';\nimport { $people, $categories, $peopleInfo } from './state';\n\n$people\n  .on(personAdded, (s, p) => [...s, p])\n  .on(personRemoved, (s, { id }) => s.filter(el => el.id !== id));\n\n$categories.on(categoryAdded, (s, p) => [...s, p]);\n\n$peopleInfo\n  .on(personInfoEdited, (s, { personId, info }) => ({\n    ...s,\n    [personId]: { ...s[personId], [info.categoryId]: info.value },\n  }))\n  .on(personAdded, (s, { id }) => ({ ...s, [id]: {} }))\n  .on(personRemoved, (s, { id }) => {\n    const newState = { ...s };\n    delete newState[id];\n    return newState;\n  });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './app';\nimport * as serviceWorker from './serviceWorker';\nimport './init';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}